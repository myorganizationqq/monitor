<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	">

	<bean id="SystemPropertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:system-db.properties</value>
			</list>
		</property>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<!-- druid会根据url格式来判断dbType从而自选driverClass,不需要额外设置该属性 -->
		<!-- <property name="driverClass" value="${driverClass}" /> -->
		<property name="url" value="${system.url}" />
		<property name="username" value="${system.username}" />
		<property name="password" value="${system.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters，去掉后监控界面 sql无法统计 -->
		<property name="filters" value="stat" />
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 
		<property name="mappingLocations">
			<list>
				<value>classpath:com/bluedon/bfw/common/entity/*.hbm.xml</value>
			</list>
		</property>
		 -->		
		<property name="packagesToScan">
			<list>
				<value>com.bluedon.monitor.common.entity</value>
				<value>com.bluedon.monitor.system.entity</value>
				<value>com.bluedon.monitor.project.entity</value>
			</list>
		</property>
		
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<prop key="hibernate.jdbc.fetch_size">100</prop>
				<prop key="hibernate.jdbc.batch_size">100</prop>
				<prop key="hibernate.max_fetch_depth">3</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				 <!--
				<prop key="hibernate.current_session_context_class">thread</prop>
				  -->
				<!--<prop key="hibernate.hbm2ddl.auto">create-drop</prop> -->
			</props>
		</property>
	</bean>
	
	<!-- config for spring transaction -->
	<!-- REQUIRED如业务方法中存在事务则将该业务加入事务之中，否则创建新的事务 -->
	
	<!-- 
	<tx:annotation-driven transaction-manager="txManager"></tx:annotation-driven>
	 -->
	 
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="merge*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="put*" propagation="REQUIRED" />
			<tx:method name="use*" propagation="REQUIRED" />
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />
			<tx:method name="query*" propagation="REQUIRED" read-only="true" />
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:pointcut id="transaction1" expression="execution(* com.bluedon.monitor..*ServiceImpl.*(..))" />
		<aop:pointcut id="transaction2" expression="execution(* com.bluedon.monitor..*Dao.*(..))" />
		<aop:advisor pointcut-ref="transaction1" advice-ref="txAdvice" />
		<aop:advisor pointcut-ref="transaction2" advice-ref="txAdvice" />
	</aop:config>


	<!--告警定时任务工厂 -->
	<bean id="SpringQtzJob" class="com.bluedon.monitor.project.job.alarm.AlarmStart"/>
	<bean id="SpringQtzJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="SpringQtzJob"/>
		</property>
		<property name="targetMethod">  <!-- 要执行的方法名称 -->
			<value>execute</value>
		</property>
	</bean>

	<!-- snmp交换机网络相关的job-->
	<bean id="netIOJob" class="com.bluedon.monitor.project.job.snmp.NetIOJob" />
	<bean id="cpuStatJob" class="com.bluedon.monitor.project.job.snmp.CpuStatJob" />
	<bean id="memStatJob" class="com.bluedon.monitor.project.job.snmp.MemStatJob" />
	<bean id="netIOJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="netIOJob"></ref>
		</property>
		<property name="targetMethod">
			<value>executeJob</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>
	<bean id="cpuStatJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="cpuStatJob"></ref>
		</property>
		<property name="targetMethod">
			<value>executeJob</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>
	<bean id="memStatJobMethod" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="memStatJob"></ref>
		</property>
		<property name="targetMethod">
			<value>executeJob</value>
		</property>
		<property name="concurrent">
			<value>false</value>
		</property>
	</bean>

	<bean id="netIOTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail"  ref="netIOJobMethod"></property>
		<property name="cronExpression" value="0 0/1 * * * ?"></property>
	</bean>

	<bean id="cpuStatTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail"  ref="cpuStatJobMethod"></property>
		<property name="cronExpression" value="0 0/15 * * * ?"></property>
	</bean>

	<bean id="memStatTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail"  ref="memStatJobMethod"></property>
		<property name="cronExpression" value="0 0/15 * * * ?"></property>
	</bean>
	<!-- ======================== 调度触发器 ======================== -->
	<bean id="CronTriggerBean" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="SpringQtzJobMethod"></property>
		<property name="cronExpression" value="0 */1 * * * ?"></property>
	</bean>

	<bean id="jobFactory" class="com.bluedon.monitor.project.job.alarm.JobFactory"></bean>
	<!-- ======================== 调度工厂 ======================== -->
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory" ref="jobFactory"></property>
		<property name="triggers">
			<list>
				<ref bean="CronTriggerBean"/>
				<ref bean="netIOTrigger" />
				<ref bean="cpuStatTrigger"></ref>
				<ref bean="memStatTrigger" />
			</list>
		</property>
	</bean>


	<bean id="threadPoolTaskExecutor"
		  class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="1" />

		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="10" />

		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE
            <property name="queueCapacity" value="1000" /> -->

		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />

		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
</beans>
